import java.util.Arrays;
import java.util.Scanner;

public class D4T4CompanyProblem {

	public static void lengthOfPath(int[][] data, int n, int s) {
		boolean[] visited = new boolean[n + 1];
		int[] edgeWeight = new int[n + 1];
		Arrays.fill(edgeWeight, Integer.MAX_VALUE);
		edgeWeight[s] = 0;

		for (int i = 1; i <= n; i++) {
			int min = findMinWeightIndex(edgeWeight, visited);
			if (min != -1) {
				visited[min] = true;
				for (int j = 1; j <= n; j++) {
					if (data[min][j] != 0 && !visited[j] && data[min][j] < edgeWeight[j]) {
						edgeWeight[j] = data[min][j];
					}
				}
				if (min != s)
					System.out.print(edgeWeight[min] + " ");
			}
		}
		System.out.println();

	}

	public static int findMinWeightIndex(int[] edgeWeight, boolean[] visited) {
		int min = Integer.MAX_VALUE, index = -1;
		for (int i = 1; i < edgeWeight.length; i++) {
			if (edgeWeight[i] < min && !visited[i]) {
				min = edgeWeight[i];
				index = i;
			}
		}
		return index;
	}

	public static void main(String[] args) {
		// System.out.println("Test");
		Scanner in = new Scanner(System.in);
		int t = in.nextInt();
		while (t-- > 0) {
			int n = in.nextInt();
			int m = in.nextInt();
			int[][] data = new int[n + 1][n + 1];
			for (int i = 1; i <= m; i++) {
				int x = in.nextInt();
				int y = in.nextInt();
				int z = in.nextInt();
				if (data[x][y] == 0 || data[x][y] > z)
					data[x][y] = z;
				if (data[y][x] == 0 || data[y][x] > z)
					data[y][x] = z;
			}
			int pos = in.nextInt();
			lengthOfPath(data, n, pos);
		}
		in.close();
	}
}

/*
Input:
9
9 23
1 1 1
1 2 2
1 7 3
1 9 4
2 1 5
2 3 6
3 7 7
3 8 8
4 5 9
4 9 10
5 2 11
5 3 12
5 5 13
5 7 14
6 1 15
6 2 16
6 5 17
7 7 18
7 8 19
8 5 20
8 9 21
9 3 22
9 7 23
9
10 39
1 4 1
1 5 2
1 6 3
1 9 4
2 2 5
2 3 6
2 6 7
3 4 8
3 5 9
3 7 10
3 8 11
3 9 12
3 10 13
4 1 14
4 2 15
4 5 16
4 6 17
4 8 18
4 9 19
4 10 20
5 8 21
5 9 22
5 10 23
6 1 24
6 6 25
6 8 26
7 1 27
7 3 28
7 7 29
7 10 30
8 1 31
8 4 32
8 6 33
8 10 34
9 4 35
9 6 36
9 7 37
9 9 38
10 9 39
2

10 37
1 2 1
1 5 2
1 7 3
2 4 4
2 8 5
3 3 6
3 6 7
3 7 8
3 9 9
4 3 10
4 4 11
4 6 12
4 9 13
5 5 14
5 6 15
5 7 16
5 8 17
5 10 18
6 4 19
6 7 20
6 8 21
7 1 22
7 3 23
7 4 24
8 4 25
8 5 26
8 10 27
9 3 28
9 4 29
9 5 30
9 6 31
9 7 32
10 1 33
10 3 34
10 4 35
10 8 36
10 9 37
6
9 25
1 1 1
1 7 2
2 4 3
2 6 4
2 7 5
2 8 6
3 3 7
3 9 8
4 1 9
4 2 10
4 6 11
4 8 12
4 9 13
5 2 14
5 3 15
5 5 16
5 6 17
5 8 18
5 9 19
6 1 20
6 3 21
6 5 22
7 3 23
8 4 24
9 7 25
4
11 49
1 5 1
1 6 2
1 8 3
1 10 4
2 2 5
2 3 6
2 4 7
2 5 8
3 3 9
3 5 10
3 8 11
3 9 12
3 10 13
3 11 14
4 2 15
4 4 16
4 8 17
4 11 18
5 2 19
5 3 20
5 8 21
6 6 22
6 9 23
7 1 24
7 2 25
7 4 26
7 5 27
7 8 28
7 10 29
8 1 30
8 4 31
8 8 32
8 9 33
8 11 34
9 1 35
9 3 36
9 4 37
9 5 38
9 8 39
9 10 40
10 1 41
10 2 42
10 5 43
10 6 44
11 1 45
11 3 46
11 4 47
11 6 48
11 11 49
3
18 119
1 2 1
1 10 2
1 12 3
1 17 4
2 2 5
2 5 6
2 11 7
2 12 8
2 13 9
2 15 10
2 18 11
3 2 12
3 3 13
3 6 14
3 8 15
3 13 16
3 14 17
3 15 18
3 18 19
4 3 20
4 15 21
4 16 22
4 17 23
4 18 24
5 2 25
5 3 26
5 4 27
5 7 28
5 9 29
5 10 30
5 12 31
5 14 32
6 1 33
6 3 34
6 5 35
6 10 36
6 11 37
6 13 38
6 15 39
6 16 40
6 17 41
6 18 42
7 1 43
7 2 44
7 4 45
7 6 46
7 8 47
7 13 48
7 14 49
7 16 50
7 17 51
8 2 52
8 3 53
8 7 54
8 9 55
8 12 56
8 13 57
8 14 58
8 18 59
9 2 60
9 3 61
9 6 62
9 7 63
9 17 64
9 18 65
10 1 66
10 5 67
10 8 68
10 17 69
11 2 70
11 4 71
11 5 72
11 6 73
11 7 74
11 11 75
11 12 76
11 13 77
11 16 78
11 17 79
12 2 80
12 3 81
12 5 82
12 7 83
12 8 84
12 9 85
12 10 86
12 12 87
13 2 88
13 5 89
13 9 90
13 12 91
13 13 92
14 3 93
14 8 94
14 10 95
14 16 96
15 4 97
15 9 98
15 13 99
15 15 100
15 16 101
15 17 102
16 1 103
16 7 104
16 12 105
16 13 106
16 17 107
17 4 108
17 7 109
17 8 110
17 9 111
17 10 112
17 12 113
17 15 114
17 18 115
18 1 116
18 8 117
18 15 118
18 16 119
5
6 13
1 3 1
1 4 2
1 5 3
2 1 4
2 3 5
3 3 6
3 5 7
4 6 8
5 1 9
5 2 10
5 6 11
6 2 12
6 3 13
4
13 57
1 7 1
1 9 2
1 11 3
1 12 4
2 7 5
2 9 6
2 10 7
2 13 8
3 7 9
3 10 10
3 11 11
4 2 12
4 5 13
4 7 14
4 10 15
4 13 16
5 1 17
5 2 18
5 6 19
5 7 20
5 12 21
5 13 22
6 1 23
6 4 24
6 5 25
6 12 26
7 11 27
7 13 28
8 1 29
8 3 30
8 10 31
8 11 32
8 12 33
8 13 34
9 1 35
9 5 36
9 10 37
10 1 38
10 2 39
10 5 40
10 10 41
10 12 42
11 1 43
11 7 44
11 9 45
11 10 46
11 13 47
12 5 48
12 8 49
12 10 50
12 12 51
13 1 52
13 5 53
13 7 54
13 9 55
13 10 56
13 13 57
4
3 3
2 3 1
3 2 2
3 3 3
2


Output:
4 2 3 6 8 10 9 15
6 7 3 1 2 4 10 11 13
7 8 3 1 2 4 5 9 18
3 4 5 2 6 13 8 14
6 7 8 1 2 3 4 12 14 24
6 1 2 3 4 7 9 10 11 12 14 15 17 20 22 28 29
2 1 3 4 8
12 5 1 2 3 4 7 8 9 13 19 29
1
*/