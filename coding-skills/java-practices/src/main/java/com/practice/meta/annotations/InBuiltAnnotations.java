package com.practice.meta.annotations;

import java.lang.annotation.Annotation;
import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Repeatable;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Method;

/*
 * An annotation is a kind of meta data in java which can be applied at various elements of java sourcecode so that later some tool, debugger 
 * or application program can take advantage of these annotations; and help analyzing the program in positive and constructive way. 
 * We can annotate classes, methods, variables, parameters and packages in java OR in one word almost everything. 
 * Annotations applied on java sourcecode is compiled into bytecode with other class members, and using reflection programmer can query this
 * meta data information to decide the appropriate action to perform in any particular context.
 * 
 * Built_in Annotations in Java: 
 * 1.Annotations Applied To Other Annotations
 * 		@Retention: When the annotation is needed
 * 		@Documented: Whether to put the annotation in Javadocs
 * 		@Target: Places the annotation can go
 * 		@Inherited: Whether subclasses get the annotation.
 * 		@Repeatable
 * 2.Annotations Applied To Java Code
 * 		@Override
 * 		@Deprecated
 * 		@SuppressWarnings
 * 		@SafeVarargs
 * 		@FunctionalInterface
 */
public class InBuiltAnnotations {

}

/****************************************Annotations Applied To Other Annotations***************************/
/* @Retention: 
 * This annotation specifies how the marked annotation is stored in java runtime. Whether it is limited to source code only, embedded into 
 * the generated class file, or it will be available at runtime through reflection as well.
 */
// @Retention(RetentionPolicy.CLASS)
@Retention(RetentionPolicy.RUNTIME)
// @Retention(RetentionPolicy.SOURCE)
@interface CustomAnnotation1 {
	// some code
}

/*
 * @Documented:
 *  This annotation indicates that new annotation should be included into java documents generated by java document generator tools.
 */
@Documented
@interface CustomAnnotation2 {
	// Some other code
}

/*
 * @Target: 
 * Use @Target annotation to restrict the usage of new annotation on certain java elements such as class, interface or methods. After
 * specifying the targets, you will be able to use the new annotation on given elements only.
 */
@Target(value = { ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.ANNOTATION_TYPE,
		ElementType.FIELD, ElementType.LOCAL_VARIABLE, ElementType.PACKAGE, ElementType.PARAMETER })
@interface CustomAnnotation3 {
	// Some other code
}

/*@Inherited: 
 * When you apply this annotation to any other annotation i.e. @MyCustomAnnotation; and @MyCustomAnnotation is applied of any class MyParentClass 
 * then @MyCustomAnnotation will be available to all child classes of MyParentClass as well. 
 */
@Inherited
@interface CustomAnnotation4 {
	// Some other code
}

/* @Repeatable
By default, an annotation is applied on a java element only once. But, by any requirement, you have to apply a annotation more than once, then use @Repeatable annotation on your new annotation.
*/
@Retention(RetentionPolicy.RUNTIME)
@Repeatable(MyRepeatedAnnos.class)
@interface Words {
	String word()

	default "Hello";

	int value() default 0;
}

// Create container annotation
@Retention(RetentionPolicy.RUNTIME)
@interface MyRepeatedAnnos {
	Words[] value();
}

class Main {

	// Repeat Words on newMethod
	@Words(word = "First", value = 1)
	@Words(word = "Second", value = 2)
	public static void newMethod() {
		Main obj = new Main();
		try {
			Class<?> c = obj.getClass();
			// Obtain the annotation for newMethod
			Method method = c.getMethod("newMethod");
			// Display the repeated annotation
			Annotation anno = method.getAnnotation(MyRepeatedAnnos.class);
			System.out.println(anno);
		} catch (NoSuchMethodException e) {
			System.out.println(e);
		}
	}
}

/***********************Annotations Applied To Java Code******************/
/* 2.Annotations Applied To Java Code
 * 		@Override
 * 		@Deprecated
 * 		@SuppressWarnings
 * 		@SafeVarargs
 * 		@FunctionalInterface
 */